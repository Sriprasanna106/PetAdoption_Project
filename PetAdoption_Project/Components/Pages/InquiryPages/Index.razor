@page "/inquiries"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Project.Domain
@using PetAdoption_Project.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory

<PageTitle>Inquiries</PageTitle>

<h1>Inquiries</h1>
<AuthorizeView Roles="User">
<p>
    <a href="inquiries/create">Create New</a>
</p>
</AuthorizeView>

<QuickGrid Class="table" Items="FilteredInquiries">
    <PropertyColumn Property="inquiry => inquiry.Question" />
   <!-- <PropertyColumn Property="inquiry => inquiry.CustomerId" /> -->
    <PropertyColumn Property="inquiry => inquiry.DateCreated" />
    <PropertyColumn Property="inquiry => inquiry.DateUpdated" />
    <PropertyColumn Property="inquiry => inquiry.CreatedBy" />
    <PropertyColumn Property="inquiry => inquiry.UpdatedBy" />

    <TemplateColumn Context="inquiry">
     <!--  <a href="@($"inquiries/edit?id={inquiry.Id}")">Edit</a> | -->
        <a href="@($"inquiries/details?id={inquiry.Id}")">Details</a> 
        <AuthorizeView Roles="Administrator">
        |<a href="@($"inquiries/delete?id={inquiry.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private PetAdoption_ProjectContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider
    private IQueryable<Inquiry> FilteredInquiries => isAdmin
    ? context.Inquiry // Admins can see all bookings
    : context.Inquiry.Where(e => e.CreatedBy == userId);
    protected override async Task OnInitializedAsync()
    {
        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
