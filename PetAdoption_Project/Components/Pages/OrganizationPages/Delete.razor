@page "/organizations/delete"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PetAdoption_Project.Domain
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Organization</h2>
    <hr />
    @if (organization is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@organization.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@organization.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@organization.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@organization.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@organization.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@organization.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="organization" OnValidSubmit="DeleteOrganization" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(organization is null)">Delete</button> |
            <a href="/organizations">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Organization? organization;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        organization = await context.Organization.FirstOrDefaultAsync(m => m.Id == Id);

        if (organization is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOrganization()
    {
        using var context = DbFactory.CreateDbContext();
        context.Organization.Remove(organization!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/organizations");
    }
}
