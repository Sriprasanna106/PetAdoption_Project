@page "/appointments"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PetAdoption_Project.Domain
@using PetAdoption_Project.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory

<PageTitle>Appointments</PageTitle>

<h1>Appointments</h1>
<!--
<p>
    <a href="appointments/create">Create New</a>
</p>
-->


<QuickGrid Class="table" Items="FilteredAppointments">
    <PropertyColumn Property="appointment => appointment.AppointmentDate" />
  <!--  <PropertyColumn Property="appointment => appointment.DateIn" /> -->
    <PropertyColumn Property="appointment => appointment.PetId" />
  <!--  <PropertyColumn Property="appointment => appointment.CustomerId" /> -->
    <PropertyColumn Property="appointment => appointment.DateCreated" />
    <PropertyColumn Property="appointment => appointment.DateUpdated" />
    <PropertyColumn Property="appointment => appointment.CreatedBy" />
    <PropertyColumn Property="appointment => appointment.UpdatedBy" />

    <TemplateColumn Context="appointment">
        <a href="@($"appointments/edit?id={appointment.Id}")">Edit</a> |
            <a href="@($"appointments/details?id={appointment.Id}")">Details</a> 
        <AuthorizeView Roles="Administrator">
            | <a href="@($"appointments/delete?id={appointment.Id}")">Delete</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private PetAdoption_ProjectContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider
    private IQueryable<Appointment> FilteredAppointments => isAdmin
    ? context.Appointment // Admins can see all bookings
    : context.Appointment.Where(e => e.CreatedBy == userId);
    protected override async Task OnInitializedAsync()
    {
        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");
        context = DbFactory.CreateDbContext();
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
