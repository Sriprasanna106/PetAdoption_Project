@page "/appointments/edit"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PetAdoption_Project.Domain
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Appointment</h2>
<hr />
@if (Appointment is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Appointment" OnValidSubmit="UpdateAppointment" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Appointment.Id" value="@Appointment.Id" />
                <div class="mb-3" >
                    <label for="dateout" class="form-label">AppointmentDate:</label>
                    <InputDate id="dateout" @bind-Value="Appointment.AppointmentDate" class="form-control" />
                    <ValidationMessage For="() => Appointment.AppointmentDate" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="datein" class="form-label">DateIn:</label>
                    <InputDate id="datein" @bind-Value="Appointment.DateIn" class="form-control" />
                    <ValidationMessage For="() => Appointment.DateIn" class="text-danger" />
                </div>
                <div class="mb-3" >
                    <label for="petid" class="form-label">PetId:</label>
                    <InputNumber id="petid" @bind-Value="Appointment.PetId" class="form-control" readonly/>
                    <ValidationMessage For="() => Appointment.PetId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="petname" class="form-label">PetName:</label>
                    <InputText id="petname" @bind-Value="Appointment.PetName" class="form-control" readonly />
                    <ValidationMessage For="() => Appointment.PetName" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="customerid" class="form-label">CustomerId:</label>
                    <InputNumber id="customerid" @bind-Value="Appointment.CustomerId" class="form-control" />
                    <ValidationMessage For="() => Appointment.CustomerId" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Appointment.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Appointment.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Appointment.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Appointment.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Appointment.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Appointment.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/appointments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Appointment? Appointment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Appointment ??= await context.Appointment.FirstOrDefaultAsync(m => m.Id == Id);

        if (Appointment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAppointment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Appointment!).State = EntityState.Modified;

        try
        {
            Appointment.DateUpdated = DateTime.Now;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AppointmentExists(Appointment!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }


        NavigationManager.NavigateTo("/appointments");
    }
    //Create userId string to store the user id, default value is "System".
    private string userId = "System";
    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider
    //Override the OnInitialized method to get the user id.
    protected override async void OnInitialized()
    {
        using var context = DbFactory.CreateDbContext();
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
    }

    private bool AppointmentExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Appointment.Any(e => e.Id == id);
    }
}
