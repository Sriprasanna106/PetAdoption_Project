@page "/appointments/delete"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PetAdoption_Project.Domain
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "User")]
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Appointment</h2>
    <hr />
    @if (appointment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DateOut</dt>
            <dd class="col-sm-10">@appointment.AppointmentDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateIn</dt>
            <dd class="col-sm-10">@appointment.DateIn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PetId</dt>
            <dd class="col-sm-10">@appointment.PetId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PetName</dt>
            <dd class="col-sm-10">@appointment.PetName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@appointment.CustomerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@appointment.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@appointment.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@appointment.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="appointment" OnValidSubmit="DeleteAppointment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(appointment is null)">Delete</button> |
            <a href="/appointments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Appointment? appointment;
    public int? PetId { get; set; }
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        appointment = await context.Appointment.FirstOrDefaultAsync(m => m.Id == Id);

        if (appointment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAppointment()
    {
        using var context = DbFactory.CreateDbContext();
        var pet = await context.Pet.FindAsync(appointment.PetId);
        if (pet != null)
        {
            pet.IsAdopted = false;
            context.Pet.Update(pet);
        }
        context.Appointment.Remove(appointment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/appointments");
    }
}
