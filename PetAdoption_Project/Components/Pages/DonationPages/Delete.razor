@page "/donations/delete"
@using Microsoft.EntityFrameworkCore
@using PetAdoption_Project.Domain
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Donation</h2>
    <hr />
    @if (donation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DateOut</dt>
            <dd class="col-sm-10">@donation.DateOut</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateIn</dt>
            <dd class="col-sm-10">@donation.DateIn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@donation.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@donation.CustomerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@donation.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@donation.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@donation.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@donation.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="donation" OnValidSubmit="DeleteDonation" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(donation is null)">Delete</button> |
            <a href="/donations">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Donation? donation;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        donation = await context.Donation.FirstOrDefaultAsync(m => m.Id == Id);

        if (donation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDonation()
    {
        using var context = DbFactory.CreateDbContext();
        context.Donation.Remove(donation!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/donations");
    }
}
