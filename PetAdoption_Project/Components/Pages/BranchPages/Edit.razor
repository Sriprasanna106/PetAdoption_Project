@page "/branches/edit"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PetAdoption_Project.Domain
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles="Administrator")]
<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Branch</h2>
<hr />
@if (Branch is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Branch" OnValidSubmit="UpdateBranch" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Branch.Id" value="@Branch.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Branch.Name" class="form-control" />
                    <ValidationMessage For="() => Branch.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Branch.Address" class="form-control" />
                    <ValidationMessage For="() => Branch.Address" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Branch.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Branch.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Branch.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Branch.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Branch.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Branch.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/branches">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Branch? Branch { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Branch ??= await context.Branch.FirstOrDefaultAsync(m => m.Id == Id);

        if (Branch is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBranch()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Branch!).State = EntityState.Modified;

        try
        {
            Branch.UpdatedBy = userId;
            Branch.DateUpdated = DateTime.Now;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BranchExists(Branch!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/branches");
    }
    //Create userId string to store the user id, default value is "System".
    private string userId = "System";
    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider
    //Override the OnInitialized method to get the user id.
    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
    }

    private bool BranchExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Branch.Any(e => e.Id == id);
    }
}
