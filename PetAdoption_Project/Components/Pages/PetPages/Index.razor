@page "/branches/{BranchId:int}/pets"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PetAdoption_Project.Domain
@using PetAdoption_Project.Data
@implements IAsyncDisposable
@inject IDbContextFactory<PetAdoption_Project.Data.PetAdoption_ProjectContext> DbFactory

<PageTitle>Pets</PageTitle>

<h1>Pets </h1>

<AuthorizeView Roles="Administrator">
    <p>
        <a href="/pets/create">Create New Pet</a>
    </p>
</AuthorizeView>
    <p>
        <a href="/branches">Go back to Branches</a>
    </p>

<QuickGrid Class="table" Items="FilteredPets">
    <PropertyColumn Property="pet => pet.Name" />
    <PropertyColumn Property="pet => pet.Age" />
    <PropertyColumn Property="pet => pet.Breed" />
    <PropertyColumn Property="pet => pet.Colour" />
    <PropertyColumn Property="pet => pet.Gender" />
    <PropertyColumn Property="pet => pet.DateUpdated" />
    <PropertyColumn Property="pet => pet.CreatedBy" />
    <PropertyColumn Property="pet => pet.UpdatedBy" />
    <PropertyColumn Property="pet => pet.IsAdopted" />

    <TemplateColumn Context="pet">
        <AuthorizeView Roles="Administrator">
            <a href="@($"/pets/edit?id={pet.Id}")">Edit</a> |
            <a href="@($"/pets/details?id={pet.Id}")">Details</a> |
            <a href="@($"/pets/delete?id={pet.Id}")">Delete</a>
        </AuthorizeView>
        <AuthorizeView Roles="User">
            <a href="@($"/appointments/create/{pet.Id}")">Adopt this pet!</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    [Parameter] public int BranchId { get; set; }
    private PetAdoption_ProjectContext context = default!;
    private string userId = string.Empty;
    private bool isAdmin = false;
    private IQueryable<Pet> FilteredPets = Enumerable.Empty<Pet>().AsQueryable();

    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");

        context = DbFactory.CreateDbContext();

        // Admins see all pets in the branch, users only see available (not adopted) pets
        FilteredPets = isAdmin
            ? context.Pet.Where(p => p.BranchId == BranchId)
            : context.Pet.Where(p => p.BranchId == BranchId && !p.IsAdopted);

        await Task.CompletedTask;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
